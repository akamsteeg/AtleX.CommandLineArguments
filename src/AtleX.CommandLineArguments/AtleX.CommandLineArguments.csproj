<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net461;net47;netstandard2.0</TargetFrameworks>
    <LangVersion>8.0</LangVersion>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <DocumentationFile>docs\AtleX.CommandLineArguments.xml</DocumentationFile>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    
    <PackageProjectUrl>https://github.com/akamsteeg/AtleX.CommandLineArguments</PackageProjectUrl>
    <Description>AtleX.CommandLineArguments is a helper library to facilitate parsing command line arguments into a strongly-typed object. Values can be validated with extensible and customisable validators and the library can automatically generate help for the user.</Description>
    
    <Copyright>© Alex Kamsteeg</Copyright>
    <Authors>Alex Kamsteeg (https://atlex.nl/)</Authors>
    <Company />
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    
    <Version>3.0.0</Version>
    
    <RepositoryUrl>https://github.com/akamsteeg/AtleX.CommandLineArguments.git</RepositoryUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <RepositoryType>Git</RepositoryType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <PackageTags>cli commandline command line arguments argument parser</PackageTags>
    <PackageReleaseNotes>      
      3.0.0:
      - [Breaking] Moved from .NET Standard 1.5 &amp; .NET 4.5 to .NET Standard 2.0 &amp; .NET 4.6.1 (#38 and #59)
      - [Feature] PrefixedKeyConsoleHelpWriter is no longer marked as abstract (#45)
      - [Feature] Added IArgumentValidator interface (#49)
      - [Feature] Added ITypeParser interface (#50)
      - [Feature] Added constructor overrides to CommandLineArgumentConfiguration to accept custom ITypeParser and/or IArgumentValidator arguments (#52)
      - [Feature] Added .AddRange() methods for ITypeParser and IArgumentValidator to CommandLineArgumentsConfiguration (#53)
      - [Feature] PrefixedKeyParser  is no longer marked as abstract (#54)
      - [Feature] Marked Parse&lt;T&gt;() methods in built-in abstract parser classes as virtual (#55)
      - [Feature] Updated the System.ComponentModel.Annotations dependency to 4.5.0 (#57)
      - [Feature] General code quality and performance improvements (#48, #51)
      - [Fix] ParseResult.IsValid is no longer re-evaluated for each call (#58)
      
      2.1.0:
      - Enabled SourceLink for a better debugging experience (#40)
      - General code quality improvements (#41, #42)

      2.0.1:
      - Performance improvements (#39)

      2.0.0:
      - [Feature] Added support for GNU/Linux style "--name value" arguments (#19)
      - [Feature] Simplified extending the library with different parsers and help writers by introducing interfaces (#8, #11)
      - [Feature] Rewritten the configuration system. This makes it a lot more explicit by strong-typed configurations (e.g. WindowsStyleConfiguration) and now by default all built-in type parsers and validators are loaded to take that burden away from the user. Also, by default the new AutoDetectConfiguration is used that uses Windows-style arguments when running on Windows, and GNU/Linux style on Linux and Mac (#9)
      - [Fix] Reduce lenght of names of commonly used classes by removing the "CommandLineArguments" cruft from it. E.g. WindowsStyleCommandLineArgumentsParser is now WindowsStyleParser (#23)
      - [Fix] Remove not-needed package reference for System.ComponentModel.Annotations from the NETFX installation (#24)
      - [Fix] Removed redundant .NET 4.6 TFM from supported frameworks. We now support .NET 4.5 and NETSTANDARD 1.5 and those are upwards compatible with newer versions of their respective runtimes (#10)
      - [Feature] Performance improvements (#29, #30, #33, #34)

      1.1.1:
      -Many internal improvements (#7, #13, #14, #15, #16, #17)
    </PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.ComponentModel.Annotations" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('net4'))">
    <Reference Include="System.ComponentModel.DataAnnotations" />
  </ItemGroup>
  
  <ItemGroup Condition="'$(TargetFramework)' == 'net461'">
    <PackageReference Include="System.ValueTuple" Version="4.5.0" />
  </ItemGroup>
  

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="docs\**" />
    <EmbeddedResource Remove="docs\**" />
    <None Remove="docs\**" />
  </ItemGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(MSBuildProjectName).Tests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <Deterministic>true</Deterministic>
    
  </PropertyGroup>

</Project>